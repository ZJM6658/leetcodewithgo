package question

/*
思路：遍历每一个点，然后递归他的四周的点，如果有矿就累加后继续遍历其四周的矿，记录找到最多的矿
*/

func GetMaximumGold(grid [][]int) int {
	//构造四个方向的差值数组
	var dirs = []struct{ x, y int }{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}
	ans := 0
	var dfs func(x, y, gold int)
	dfs = func(x, y, gold int) {
		gold += grid[x][y]
		// 这个点所能找到的最长路径的金矿存下来
		if gold > ans {
			ans = gold
		}
		// 先将当前置为零 再置回来
		rec := grid[x][y]
		grid[x][y] = 0
		// 四个方向递归寻找
		for _, dir := range dirs {
			nx, ny := x+dir.x, y+dir.y
			// 如果周围有一个非零就继续走
			if nx >= 0 && ny >= 0 && nx < len(grid) && ny < len(grid[nx]) && grid[nx][ny] > 0 {
				// 此轮gold持续累加
				dfs(nx, ny, gold)
			}
		}
		grid[x][y] = rec
	}

	for x, row := range grid {
		for y, gold := range row {
			if gold > 0 {
				// 因为里面会加，所以这里gold传入0
				dfs(x, y, 0)
			}
		}
	}
	return ans
}

/**
1219. 黄金矿工
你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，并用大小为 m * n 的网格 grid 进行了标注。每个单元格中的整数就表示这一单元格中的黄金数量；如果该单元格是空的，那么就是 0。

为了使收益最大化，矿工需要按以下规则来开采黄金：

每当矿工进入一个单元，就会收集该单元格中的所有黄金。
矿工每次可以从当前位置向上下左右四个方向走。
每个单元格只能被开采（进入）一次。
不得开采（进入）黄金数目为 0 的单元格。
矿工可以从网格中 任意一个 有黄金的单元格出发或者是停止。


示例 1：

输入：grid = [[0,6,0],[5,8,7],[0,9,0]]
输出：24
解释：
[[0,6,0],
 [5,8,7],
 [0,9,0]]
一种收集最多黄金的路线是：9 -> 8 -> 7。
示例 2：

输入：grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
输出：28
解释：
[[1,0,7],
 [2,0,6],
 [3,4,5],
 [0,3,0],
 [9,0,20]]
一种收集最多黄金的路线是：1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7。


提示：

1 <= grid.length, grid[i].length <= 15
0 <= grid[i][j] <= 100
最多 25 个单元格中有黄金。
*/
