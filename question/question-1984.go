package question

import (
	"math"
	"sort"
)

/**
输入：
[87063,61094,44530,21297,95857,93551,9918]
6
输出：
2306
预期结果：
74560
*/

// 首先对数组 nums 进行升序排序，
// 随后使用一个大小固定为 k 的滑动窗口在 nums 上进行遍历。记滑动窗口的左边界为 i，那么右边界即为 i+k−1，
// 窗口中的 k 名学生最高分和最低分的差值即为 nums[i+k−1]−nums[i]。
// 最终的答案即为所有 nums[i+k−1]−nums[i] 中的最小值。
func MinimumDifference(nums []int, k int) int {
	l := len(nums)
	sort.Ints(nums)
	ret := math.MaxInt32

	for i, num := range nums[:l-k+1] {
		ret = min(ret, nums[i+k-1]-num)
	}
	return ret
}

//func min(a, b int) int {
//	if a > b {
//		return b
//	}
//	return a
//}

/*
1984. 学生分数的最小差值
给你一个 下标从 0 开始 的整数数组 nums ，其中 nums[i] 表示第 i 名学生的分数。另给你一个整数 k 。

从数组中选出任意 k 名学生的分数，使这 k 个分数间 最高分 和 最低分 的 差值 达到 最小化 。

返回可能的 最小差值 。



示例 1：

输入：nums = [90], k = 1
输出：0
解释：选出 1 名学生的分数，仅有 1 种方法：
- [90] 最高分和最低分之间的差值是 90 - 90 = 0
可能的最小差值是 0
示例 2：

输入：nums = [9,4,1,7], k = 2
输出：2
解释：选出 2 名学生的分数，有 6 种方法：
- [9,4,1,7] 最高分和最低分之间的差值是 9 - 4 = 5
- [9,4,1,7] 最高分和最低分之间的差值是 9 - 1 = 8
- [9,4,1,7] 最高分和最低分之间的差值是 9 - 7 = 2
- [9,4,1,7] 最高分和最低分之间的差值是 4 - 1 = 3
- [9,4,1,7] 最高分和最低分之间的差值是 7 - 4 = 3
- [9,4,1,7] 最高分和最低分之间的差值是 7 - 1 = 6
可能的最小差值是 2


提示：

1 <= k <= nums.length <= 1000
0 <= nums[i] <= 105

*/
